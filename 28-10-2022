Modules:

It is a chunk of code, that will be used to maintain modularity of the component/class. 
Export and Import. 

Export:- Any declaration (such as a variable, function,class,interface etc) can be exported by adding the export keyword.
   Export statements are handy when exports need to be renamed for consumers.
  e.g.,Stringvalidator.ts--
  export interface StringValidator {
  isAcceptable(s: string): boolean;
  }
 Import:-mporting is just about as easy as exporting from a module. Importing an exported declaration is done through using one of the import forms.

-> ./ - 1 file back 
-> ../ - 2 files back

Interfaces
It defines the structures of a class/object. 
maintains the structure, can be used as function types. 
mainly it is used to define a contract b/w unrelated classes.
An interface_name is name of interface. 
Interface body conatins variables and methods declarations. 
Creating an interface OS with properties.
e.g.,interface OS { 
     name: String;  
     language: String;  
  }  
  let OperatingSystem = (type: OS): void => {  
  console.log('Android ' + type.name + ' has ' + type.language + ' language.');  
};  
let OperatingSystem = (type) => {  
    console.log('Android ' + type.name + ' has ' + type.language + ' language.');  
};  
let Oreo = { name: 'O', language: 'Java' };  
OperatingSystem(Oreo);  
output:--Android O has java language. 
Tuples:- 
Store a collection of values of varied types.Where arrays will not serve this purpose.
Typescript give us a data type called tuple that helps to achieve such a purpose.
Tuples enable storing multiple fields of different types and can also be passed as parameters to functions. 
Syntax:- 
var tuple_name = [value1,value2,value3,â€¦value n] 
e.g.,var mytuple = [10,"Hello"]; 
Tuple values are individually called items. Tuples are index based.
Differnece b/w let,var and const..?? 
These are the keywords to declare variables.
sample Code:-
var ticket=new booktickets("jinna","AMB")
tickets.file_name="tenent";
console.log(ticket.file_name)

constant ticket_price:number=500;
class booktickets
{
public film_name:string
theater_name:string;
constructor(b:string, c:string)
{
this.film_name=b;
this.theater_name=c;
}
book tickets()
{
return "film name: "+ this.film_name+"in"+this.theater_name+"and ticket price is :::"+ticket_price+"INR
}
cancelticket(){
return"cancelling tickets!";
}
private holdticket(){
return"Hold Ticket";
}
}
